// Ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y
import './RecentActivity.css';

interface Activity {
  id: string;
  type: 'charge_start' | 'charge_end' | 'battery_swap' | 'maintenance' | 'payment' | 'alert';
  user: string;
  description: string;
  time: string;
  status: 'success' | 'warning' | 'error' | 'info';
  amount?: string;
}

interface RecentActivityProps {
  activities?: Activity[];
}

export const RecentActivity = ({ activities }: RecentActivityProps) => {
  const activityData: Activity[] = activities || [
    {
      id: 'ACT001',
      type: 'charge_start',
      user: 'Nguy·ªÖn VƒÉn A',
      description: 'B·∫Øt ƒë·∫ßu phi√™n s·∫°c',
      time: '2 ph√∫t tr∆∞·ªõc',
      status: 'success',
      amount: '85.000 VND'
    },
    {
      id: 'ACT002',
      type: 'battery_swap',
      user: 'Tr·∫ßn Th·ªã B',
      description: 'ƒê·ªïi pin th√†nh c√¥ng',
      time: '15 ph√∫t tr∆∞·ªõc',
      status: 'success',
      amount: '120.000 VND'
    },
    {
      id: 'ACT003',
      type: 'payment',
      user: 'L√™ VƒÉn C',
      description: 'Thanh to√°n th√†nh c√¥ng',
      time: '25 ph√∫t tr∆∞·ªõc',
      status: 'success',
      amount: '65.000 VND'
    },
    {
      id: 'ACT004',
      type: 'maintenance',
      user: 'Nh√¢n vi√™n',
      description: 'B·∫£o tr√¨ pin BAT005',
      time: '1 gi·ªù tr∆∞·ªõc',
      status: 'info'
    },
    {
      id: 'ACT005',
      type: 'charge_end',
      user: 'Ph·∫°m Th·ªã D',
      description: 'K·∫øt th√∫c phi√™n s·∫°c',
      time: '1 gi·ªù tr∆∞·ªõc',
      status: 'success',
      amount: '95.000 VND'
    },
    {
      id: 'ACT006',
      type: 'alert',
      user: 'H·ªá th·ªëng',
      description: 'Nhi·ªát ƒë·ªô cao t·∫°i tr·∫°m',
      time: '2 gi·ªù tr∆∞·ªõc',
      status: 'warning'
    }
  ];

  const getActivityIcon = (type: string) => {
    switch(type) {
      case 'charge_start': return '‚ö°';
      case 'charge_end': return '‚úÖ';
      case 'battery_swap': return 'üîã';
      case 'maintenance': return 'üîß';
      case 'payment': return 'üí∞';
      case 'alert': return 'üö®';
      default: return 'üìù';
    }
  };

  const getStatusColor = (status: string) => {
    switch(status) {
      case 'success': return 'var(--success-color)';
      case 'warning': return 'var(--warning-color)';
      case 'error': return 'var(--error-color)';
      case 'info': return 'var(--info-color)';
      default: return 'var(--text-tertiary)';
    }
  };

  const getTypeText = (type: string) => {
    switch(type) {
      case 'charge_start': return 'B·∫Øt ƒë·∫ßu s·∫°c';
      case 'charge_end': return 'K·∫øt th√∫c s·∫°c';
      case 'battery_swap': return 'ƒê·ªïi pin';
      case 'maintenance': return 'B·∫£o tr√¨';
      case 'payment': return 'Thanh to√°n';
      case 'alert': return 'C·∫£nh b√°o';
      default: return 'Ho·∫°t ƒë·ªông';
    }
  };

  return (
    <div className="recent-activity">
      <div className="section-header">
        <h3>Ho·∫°t ƒê·ªông G·∫ßn ƒê√¢y</h3>
        <button className="btn-text">Xem t·∫•t c·∫£ ‚Üí</button>
      </div>

      <div className="activity-filters">
        <div className="filter-buttons">
          <button className="filter-btn active">T·∫•t c·∫£</button>
          <button className="filter-btn">S·∫°c</button>
          <button className="filter-btn">Thanh to√°n</button>
          <button className="filter-btn">C·∫£nh b√°o</button>
        </div>
      </div>

      <div className="activities-list">
        {activityData.map(activity => (
          <div key={activity.id} className="activity-item">
            <div 
              className="activity-icon"
              style={{ backgroundColor: `${getStatusColor(activity.status)}20` }}
            >
              {getActivityIcon(activity.type)}
            </div>
            
            <div className="activity-content">
              <div className="activity-header">
                <div className="activity-info">
                  <span className="activity-type">{getTypeText(activity.type)}</span>
                  <span className="activity-user">{activity.user}</span>
                </div>
                <div className="activity-meta">
                  <span className="activity-time">{activity.time}</span>
                  {activity.amount && (
                    <span className="activity-amount">{activity.amount}</span>
                  )}
                </div>
              </div>
              
              <div className="activity-description">
                {activity.description}
              </div>
              
              <div 
                className="activity-status"
                style={{ color: getStatusColor(activity.status) }}
              >
                {activity.status === 'success' && 'Th√†nh c√¥ng'}
                {activity.status === 'warning' && 'C·∫£nh b√°o'}
                {activity.status === 'error' && 'L·ªói'}
                {activity.status === 'info' && 'Th√¥ng tin'}
              </div>
            </div>
          </div>
        ))}
      </div>

      <div className="activity-summary">
        <div className="summary-card">
          <div className="summary-value">{activityData.length}</div>
          <div className="summary-label">Ho·∫°t ƒë·ªông h√¥m nay</div>
        </div>
        <div className="summary-card">
          <div className="summary-value">
            {activityData.filter(a => a.status === 'success').length}
          </div>
          <div className="summary-label">Th√†nh c√¥ng</div>
        </div>
        <div className="summary-card">
          <div className="summary-value">
            {activityData.filter(a => a.type === 'payment').length}
          </div>
          <div className="summary-label">Giao d·ªãch</div>
        </div>
      </div>
    </div>
  );
};