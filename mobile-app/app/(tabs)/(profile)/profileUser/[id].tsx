import React, { useEffect, useState } from "react";
import {
  View,
  Text,
  TextInput,
  ActivityIndicator,
  StyleSheet,
  Alert,
  ScrollView,
} from "react-native";
import { useLocalSearchParams } from "expo-router";
import UserAvatar from "../../../../components/user-avatar";
import { Pressable } from "react-native";

const UserProfile = () => {
  const { id } = useLocalSearchParams();
  const [user, setUser] = useState<any>({
    name: "",
    email: "",
    phone: "",
    address: "",
    cccd: "",
    avatar: "",
  });
  const [loading, setLoading] = useState(true);
  const [updating, setUpdating] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // üì• L·∫•y th√¥ng tin user t·ª´ gateway
useEffect(() => {
  const fetchUser = async () => {
    try {
      const res = await fetch(`http://localhost:8080/api/users/${id}`);
      if (!res.ok) throw new Error("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ng∆∞·ªùi d√πng");
      const data = await res.json();
      setUser(data);
    } catch (err: any) {
      console.error("L·ªói khi t·∫£i d·ªØ li·ªáu:", err);
      setError("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ng∆∞·ªùi d√πng, ƒëang d√πng d·ªØ li·ªáu m·∫´u ƒë·ªÉ test.");

      // D·ªØ li·ªáu m·∫´u
      setUser({
        name: "Ho√†ng VƒÉn A",
        email: "vana@example.com",
        phone: "0123456789",
        address: "123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM",
        cccd: "123456789012",
      });
    } finally {
      setLoading(false);
    }
  };

  fetchUser();
}, [id]);

  // üì§ G·ª≠i y√™u c·∫ßu c·∫≠p nh·∫≠t
  const handleUpdate = async () => {
    try {
      setUpdating(true);
      const res = await fetch(`http://localhost:8080/api/users/${id}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(user),
      });

      if (!res.ok) throw new Error("C·∫≠p nh·∫≠t th·∫•t b·∫°i");
      Alert.alert("‚úÖ Th√†nh c√¥ng", "C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng th√†nh c√¥ng!");
    } catch (err) {
      console.error("Update Error:", err);
      Alert.alert("‚ùå L·ªói", "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng");
    } finally {
      setUpdating(false);
    }
  };

  if (loading) {
    return (
      <View style={styles.center}>
        <ActivityIndicator size="large" color="#8e7a6b" />
      </View>
    );
  }

  return (
    <ScrollView contentContainerStyle={styles.container}>
      {error && <Text style={styles.errorText}>‚ö†Ô∏è {error}</Text>}

      {/* Avatar */}
      <View style={styles.avatarWrapper}>
        {user?.avatar ? (
          <UserAvatar name={user.name} size={120} backgroundColor="#ccc" />
        ) : (
          <UserAvatar name={user?.name || "?"} size={120} />
        )}
      </View>

      {/* Form th√¥ng tin */}
      <View style={styles.infoContainer}>
        <Text style={styles.label}>H·ªç v√† t√™n</Text>
        <TextInput
          style={styles.input}
          value={user.name}
          onChangeText={(text) => setUser({ ...user, name: text })}
          placeholder="Nh·∫≠p h·ªç v√† t√™n"
        />

        <Text style={styles.label}>Email</Text>
        <TextInput
          style={styles.input}
          value={user.email}
          onChangeText={(text) => setUser({ ...user, email: text })}
          placeholder="Nh·∫≠p email"
        />

        <Text style={styles.label}>S·ªë ƒëi·ªán tho·∫°i</Text>
        <TextInput
          style={styles.input}
          value={user.phone}
          onChangeText={(text) => setUser({ ...user, phone: text })}
          placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
        />

        <Text style={styles.label}>ƒê·ªãa ch·ªâ</Text>
        <TextInput
          style={styles.input}
          value={user.address}
          onChangeText={(text) => setUser({ ...user, address: text })}
          placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ"
        />

        <Text style={styles.label}>CCCD</Text>
        <TextInput
          style={styles.input}
          value={user.cccd}
          onChangeText={(text) => setUser({ ...user, cccd: text })}
          placeholder="Nh·∫≠p CCCD"
        />
      </View>

      {/* N√∫t c·∫≠p nh·∫≠t */}
      <Pressable
        onPress={handleUpdate}
        disabled={updating}
        style={[
          styles.button,
          { backgroundColor: updating ? "#aaa" : "#8e7a6b" },
        ]}
      >
        <Text style={styles.buttonText}>
          {updating ? "ƒêang c·∫≠p nh·∫≠t..." : "C·∫≠p nh·∫≠t th√¥ng tin"}
        </Text>
      </Pressable>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    alignItems: "center",
    padding: 20,
  },
  center: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
  },
  avatarWrapper: {
    marginVertical: 15,
  },
  infoContainer: {
    width: "100%",
    marginTop: 10,
    paddingHorizontal: 10,
  },
  label: {
    fontSize: 18,
    color: "#0b0b0bff",
    marginTop: 12,
    fontWeight: "bold",
    marginBottom: 3,
  },
  input: {
    borderWidth: 1,
    borderColor: "#ddd",
    borderRadius: 8,
    paddingHorizontal: 10,
    paddingVertical: 8,
    fontSize: 16,
    backgroundColor: "#fff",
  },
  button: {
    marginTop: 25,
    borderRadius: 8,
    paddingVertical: 12,
    paddingHorizontal: 20,
  },
  buttonText: {
    color: "#fff",
    fontWeight: "bold",
    fontSize: 19,
    textAlign: "center",
  },
  errorText: {
    color: "red",
    marginBottom: 5,
  },
});

export default UserProfile;
